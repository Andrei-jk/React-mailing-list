.header__title {
  display: block;
  color: var(--textsColor);
  font-family: var(--font2);
  /* font-family: Eastman; */
  font-size: clamp(16px, calc(0.402rem + 3vw), 64px);
  font-weight: 400;
  line-height: clamp(22px, calc(0.578rem + 4vw), 86px);
  text-align: center;

  /* width: 880px; */
  /* max-width: 780px; */
  /* !Очень важно = в данном примере чтобы отображалось и в Chrome и в Firefox адаптивно и одинаково, значение 90.434px подбиралось рандомно от первоначального выданного https://min-max-calculator.9elements.com/?220,570,319,1920 */
  max-width: clamp(220px, calc(90.434px + 41.22vw), 880px);
  /* width: clamp(220px, calc(77.434px + 41.22vw), 880px); */
  /* max-width: clamp(220px, calc(94.864px + 34.98vw), 780px); */
  margin: 0 auto;
  padding-bottom: 30px;
}

.add_class{
  color: var(--textsColor);
  font-family: var(--font2);
  font-size: clamp(16px, calc(0.402rem + 3vw), 64px);
  /* font-size: 64px; */
  font-weight: 600;
  /* line-height: 86px; */
  line-height: clamp(22px, calc(0.578rem + 4vw), 86px);
  text-align: left;
  margin-top: clamp(65px, calc(2.668rem + 7vw), 177px);
  /* margin-left: clamp(10px, calc(-1.262rem + 16.68vw), 220px); */
  margin-left: clamp(33px, calc(-1.262rem + 16.68vw), 220px);
  /* margin-left: 220px; */
  padding: 0;
  margin-bottom: 30px;
  max-width: 977px;
  /* ! === */
  white-space: normal; /* Разрешает перенос строк */
  overflow-wrap: break-word; /* Современное свойство для переноса */
  /* ! === */
}
.test {
  border: 3px solid greenyellow;
}
/* .text_container {
  margin: 0 auto;
   max-width: clamp(220px, calc(90.434px + 41.22vw), 880px);
} */
.subtitle {
  /* color: rgb(17, 0, 255); */
  color: var(--textsColor);
  font-family: var(--font2);
  /* font-size: 24px; */
  font-size: clamp(12px, calc(0.601rem + 0.75vw), 24px);
  font-weight: 400;
  line-height: clamp(15px, calc(0.751rem + 0.94vw), 30px);
  text-align: left;
   /* max-width: clamp(260px, calc(11.393rem + 24.36vw), 650px); */
   max-width: 620px;
  /* ! === */
  white-space: normal; /* Разрешает перенос строк */
  overflow-wrap: break-word; /* Современное свойство для переноса */
  /* ! === */
  /* margin-left: clamp(33px, calc(-1.262rem + 16.68vw), 300px); */
  margin-left: clamp(33px, calc(-1.262rem + 16.68vw), 220px);

}

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/* ! Как правильно пересчитать 5.531rem?
    rem всегда привязан к font-size элемента <html>.
    → 5.531rem = 5.531 * 14px = 77.434px (а не 88.5px).
    где 14px это размер шрифта заданного для всего HTML
    Ваш исправленный clamp():
    Если хотите сохранить изначальный замысел (как при 16px), нужно пересчитать rem:
    css

width: clamp(220px, calc(77.434px + 41.22vw), 880px);  */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* 
Отлично, что сработало! Давайте разберём почему calc() исправил проблему, хотя без него font-size и line-height работали.
1. Почему без calc() не работало?

Ваш исходный код:
css

width: clamp(220px, 5.531rem + 41.22vw, 880px);

Причина:

    Спецификация CSS требует, чтобы математические операции внутри clamp()/min()/max() были обёрнуты в `calc()**.

    Браузеры иногда "прощают" это для простых случаев (как font-size), но для сложных расчётов (особенно с rem + vw) могут игнорировать правило.

Что происходило:

    Браузер видел 5.531rem + 41.22vw как два отдельных значения (а не как сумму), поэтому:

        Подставлял только первое (5.531rem), игнорируя + 41.22vw.

        Или вообще не применял свойство (как в вашем случае).

2. Почему calc() решил проблему?

Исправленный код:
css

width: clamp(220px, calc(5.531rem + 41.22vw), 880px);

Как это работает:

    calc() — это CSS-функция, которая явно говорит браузеру:
    "Вычисли выражение математически, а не как строку".

    Браузер теперь корректно:

        Конвертирует 5.531rem в пиксели (например, 5.531 * 16px = 88.5px).

        Вычисляет 41.22vw (например, 41.22% от ширины окна).

        Складывает их (88.5px + 41.22vw).

        Передаёт результат в clamp().

Пример расчёта для экрана 1920px:

    5.531rem = 88.5px (если 1rem = 16px).

    41.22vw = 41.22% от 1920px = 791.42px.

    Итог: 88.5px + 791.42px = 879.92px → clamp() выбирает 880px (максимум).

3. Почему font-size работал без calc()?

Ваш код:
css

font-size: clamp(16px, 0.402rem + 3vw, 64px);

Причина:

    Браузеры нестрого соблюдают спецификацию для некоторых свойств (типа font-size, line-height), где calc() исторически был опционален.

    Это неофициальное поведение, поэтому:

        Где-то работает (как у вас).

        Где-то ломается (как с width).

4. Когда calc() обязателен?
Сценарий	Нужен calc()?	Почему?
clamp(10px, 2rem + 5vw, 100px)	Да	Сложение единиц (rem + vw).
clamp(10px, 2rem, 100px)	Нет	Нет операций.
font-size: 1rem + 2px	Да	Любая операция вне clamp().
5. Вывод:

    Всегда используйте calc() внутри clamp(), если есть арифметические операции.

    Браузеры могут "хакать" для обратной совместимости, но это ненадёжно.

    Ваш случай — пример того, как строгое следование спецификации предотвращает баги.

Итоговое правило:
css

/* ✅ Правильно */
/* width: clamp(220px, calc(5.531rem + 41.22vw), 880px); */

/* ❌ Рискованно */
/* width: clamp(220px, 5.531rem + 41.22vw, 880px); 
*/
