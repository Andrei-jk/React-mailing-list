/* кнопка, которая открывает подписку на рассылку */
.subBtn {
  padding: 16px 24px;
  font-family: Eastman;
  line-height: 20px;
  font-weight: 400;
  font-size: 18px;
  background: linear-gradient(
    132.1deg,
    rgb(147, 231, 54) -28.477%,
    rgb(19, 161, 108) 105.673%
  );
  border-radius: 50px;
  display: inline-block;
  text-align: center;
  color: rgb(255, 255, 255);
  max-width: 305px;
  opacity: 1;
  /* ================================ */
  /* overflow: hidden; */
  /* transform: scale(1); */
  /* transition: all 2s cubic-bezier(0.4, 0, 0.2, 1); */
  /* max-height: 52px; */
 will-change: transform, opacity, height, padding;
  /* ================================ */
  /* will-change — это CSS-свойство, которое позволяет браузеру заранее оптимизировать производительность анимаций, указывая, какие свойства элемента могут измениться в ближайшее время. Это помогает улучшить плавность анимаций и уменьшить нагрузку на процессор.
Применение свойств

    transform: Указывает, что элемент будет изменять свои трансформации (например, перемещение, вращение). Это позволяет браузеру применять оптимизации, такие как использование GPU.

    opacity: Указывает, что прозрачность элемента будет изменяться. Это позволяет плавно анимировать эффекты прозрачности.

    height: Указывает, что высота элемента может изменяться. Это может помочь с анимацией, когда элемент растягивается или сжимается.

Пример использования
css

.element {
  will-change: transform, opacity, height;
}

Заключение

Использование will-change помогает браузеру заранее подготовиться к изменениям, что может улучшить производительность анимаций и сделать их более плавными. Однако не стоит использовать это свойство слишком часто, чтобы избежать излишней нагрузки на память. */
  animation: fadeIn 0.9s ease-out both;
  -webkit-animation: fadeIn 0.9s ease-out both;
}
/* класс для исчезания кнопки открытия */
.subBtn.disappear {
  pointer-events: none;
  animation: fadeOut 0.9s ease-out both;
  -webkit-animation: fadeOut 0.9s ease-out both;
}

/* !ВНИМАНИЕ, анимация через @keyframes проще в написании, меньше кода и значительно плавнее! */
/* Анимация исчезновения для кнопки*/
@keyframes fadeOut {
  0% {
    opacity: 1;
    transform: scale(1);
    height: 56px;
    padding: 16px 24px;
    /* margin: initial; */
  }
  100% {
    opacity: 0;
    transform: scale(0.95);
    height: 0;
     padding: 0 24px;
    /* padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0; */
}
}

/* Анимация появления */
@keyframes fadeIn {
  0% {
    opacity: 0;
    transform: scale(0.95);
    height: 0;
    /* при таком padding, кнопка скрывается */
     padding: 0 24px;
    /* padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0; */
 
}
  100% {
    opacity: 1;
    transform: scale(1);
    height: 56px;
    padding: 16px 24px;
    /* margin: initial; */
  }
}
/* блок subscription в котором находится сама форма  */
/* запишем анимацию модального окна на @keyframes */
@keyframes modalOpen {
  0% {
    height: 0;
    opacity: 0;
  }
  100% {
    height: 100vh;
    opacity: 1;
  }
}

@keyframes modalClose {
  0% {
    height: 100vh;
    opacity: 1;
  }
  100% {
    height: 0;
    opacity: 0;
  }
}
.modalContainer {
  position: fixed;
  /*width: 100%;
  */width: 100vw;
  /*Начальная высота*/
  height: 0;
  top: 0;
  left: 0;
  background: rgb(21, 182, 142);
  /*центруем*/
  display: flex;
  justify-content: center;
  align-items: center;
  /*Скрываем содержимое*/
  overflow: hidden;
  /*overflow: auto;
  *//*Анимация для высоты и прозрачности*/
  animation: modalClose 0.9s ease-out both;
  opacity: 0;
  visibility: hidden;
  margin: 0;
  padding: 0;
  /*transition: height 1.8s ease, opacity 2.8s ease;
  -webkit-transition: height 1.8s ease, opacity 2.8s ease;
  -moz-transition: height 1.8s ease, opacity 2.8s ease;
  -ms-transition: height 1.8s ease, opacity 2.8s ease;
  -o-transition: height 1.8s ease, opacity 2.8s ease;
  *//*Предотвращаетскроллосновногоконтента*/overscroll-behavior-y: contain;
  -webkit-animation: modalClose 0.9s ease-out both;
  -webkit-animation: modalClose 0.9s ease-out both;
  will-change: height, opacity;
}
/* если при перезагрузке страницы сначало появляется модалка и сразу исчезает, то надо (рекомендуется) скрыть модалку изначально 
.modal {
  display: none; /* или opacity: 0 + visibility: hidden */
/* } */
 /* а затем, при открытии, поменять на display: block (или opacity: 1 и  visibility: visible;) через JS.
 в .modalContainer и .modalContainer.open это описано  */

.modalContainer.open {
   height: 100vh;
   /*Полная высота при открытии*/
   opacity: 1;
   /*Полная видимость*/
   animation: modalOpen 1.0s ease-out both;
   /*!ОЧЕНЬ ВАЖНО = свойство ниже добавляется модальному меню ОБЯЗАТЕЛЬНО, для того чтобы при малых экранах можно было добраться ко ВСЕМ пунктам мобильного меню*/
   overflow:hidden;
   /*transition: height 2.8s ease, opacity 0.8s ease;
   -webkit-transition: height 2.8s ease, opacity 0.8s ease;
   -moz-transition: height 2.8s ease, opacity 0.8s ease;
   -ms-transition: height 2.8s ease, opacity 0.8s ease;
   -o-transition: height 2.8s ease, opacity 0.8s ease;
   */-webkit-animation: modalOpen 1.0s ease-out both;
   -webkit-animation: modalOpen 1.0s ease-out both;
   visibility: visible;
}
.subscription {
  /* padding: 20px calc(100vw - 100%) 20px 60px; */
  padding: 45px;
  /* width: 80%; */
  /* max-width: 600px; */
    /* max-width: 100%; */
    width: 100%;
    height: 100%;
    /* padding-left: 60px; */
    padding-left: clamp(50px, 3rem + 0.62vw, 60px);
    /* ************************** */
        /* Было: padding-right: calc(100vw - 100%)
    Стало: padding-right: calc(45px + (100vw - 100%))
    Почему: Сохраняем симметрию с базовым padding 45px */
    /* ************************** */
    padding-right:  calc(45px + (100vw - 100%));
   /* Компенсация скроллбара */
   /* overflow-x: hidden; */
}
/* форма */
.form {
  position: relative;
  width: 80%;
  /* text-align: center; */
  top: 20px;
}
.subscription h1 {
  color: white;
  font-size: 45px;
  font-weight: 700;
  margin-bottom: 20px;
}
.wrapperP {
  font-size: 32px;
  font-weight: 700;
  color: rgb(251, 215, 72);
  /* color: blue; */
  margin-bottom: 20px;
}
.agree {
  font-weight: 300;
  color: rgb(251, 215, 72);
  margin-bottom: 20px;
}
.agree p {
  font-size: 15px;
  margin-bottom: 10px;
}
.agree a {
  color: rgb(231, 48, 48);
  font-size: 12px;
}
/* .link{
margin-top: 50px;
} */
hr {
  height: 2px;
  background-color: rgb(231, 48, 48);
  margin-bottom: 20px;
}
/* кнопка закрытия окна подписки */
.btn__close {
  position: absolute;
  font-size: 50px;
  font-weight: 200;
  top: 25px;
  right: 42px;
  cursor: pointer;
  display: inline-block;
  box-shadow: none;
  background-color: transparent;
  background: none;
  width: 55px;
  height: 55px;
  color: white;
}
.btn__close:active {
  transform: rotate(360deg);
  transition: transform 0.5s ease;
  -webkit-transition: transform 0.5s ease;
  -moz-transition: transform 0.5s ease;
  -ms-transition: transform 0.5s ease;
  -o-transition: transform 0.5s ease;
  -webkit-transform: rotate(360deg);
  -moz-transform: rotate(360deg);
  -ms-transform: rotate(360deg);
  -o-transform: rotate(360deg);
}

input {
  width: 100%;
  padding: 10px;
  display: inline-block;
  margin: 10px 0px 20px;
  /* background-color: rgba(255, 217, 0, 0.438); */
  background-color: white;
}
input:focus {
  outline: none;
  background-color: white;
}
input[type="checkbox"] {
  margin-top: 20px;
  margin-left: -58px;
}
/* для того, чтобы правильно выстроить label и input в React (потому что в React нельзя просто добавить текст в input (см разметку)) надо писать CSS-свойства как показано ниже */
.check label {
  display: flex;
  align-items: center;
  gap: 15px;
}
.check input {
  width: 16px;
  height: 16px;
  margin: 0;
  cursor: pointer; /* Меняем курсор на "руку" при наведении */
}
.check span {
  font-size: 20px;
  user-select: none; /* Запрещаем выделение текста */
}
label {
  color: rgb(46, 53, 61);
  font-size: 20px;
}
.check {
  margin-bottom: 20px;
}
/* кнопки внизу */
.cansel__btn,
.sign__btn {
  position: relative;
  background-color: #9c50e3;
  color: white;
  font-weight: 700;
  padding: 10px 20px;
  border-radius: 10px;
  cursor: pointer;
  transition: 0.4s;
  -webkit-transition: 0.4s;
  -moz-transition: 0.4s;
  -ms-transition: 0.4s;
  -o-transition: 0.4s;
}
.cansel__btn {
  margin-right: 15px;
}
/* еще один вариант реализации активной кнопки */
.cansel__btn:active,
.sign__btn:active {
  transform: translateY(10px);
}
/* описываем класс lock, который добавляется к body, для отмены скрола при открытом модальном меню */
.lock {
  overflow: hidden;
  position: fixed;
  width: 100%;
    height: 100%;
  top: 0;
  left: 0;
   touch-action: none; /* Блокируем скролл на мобильных устройствах */
}

